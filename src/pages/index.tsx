import { type NextPage } from "next";
import Head from "next/head";
import type { ListChildComponentProps } from 'react-window';
import { FixedSizeList } from 'react-window';
import { api } from "../utils/api";
import { Container, CssBaseline, Box, Typography, Button, Card, CardContent, Grid, ListItemButton, ListItemIcon, ListItemText, CircularProgress,Avatar, Link, TextField } from "@mui/material";
import { ResponsiveAppBar } from "../components/AppBar";
import { DateTime } from 'luxon';
import type { Booking} from "@prisma/client";
import { SubType } from "@prisma/client";
import EventIcon from '@mui/icons-material/Event'
import DeleteIcon from '@mui/icons-material/Delete'
import LockOutlinedIcon from '@mui/icons-material/LockOutlined'
import { useSession } from "next-auth/react";

const Home: NextPage = () => {
  const sessionData = useSession();
  
  if (sessionData.status === 'unauthenticated') return <SignIn />

  if (sessionData.status === 'loading') return <CircularProgress />  
  const { data: bookings} = api.bookings.getCurrent.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ResponsiveAppBar />
        <Container component="main" maxWidth="xs">
          <CssBaseline />
          <Box
            sx={{
              marginTop: 3,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              height: '95vh',
              width: '100%'
            }}
          >
            <SubscriptionInfo />
            {bookings &&  bookings.length >0 ? <Box sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center'
            }}>
              <Typography gutterBottom variant="h6">Prenotazioni</Typography>
              <BookingList/> 
            </Box> : <Typography color="gray"> Nessuna prenotazione </Typography>}
            <Button component="a" href="/new" sx={{mt: '2rem'}} variant="contained" color="primary" aria-label="nuova prenotazione">
                Nuova prenotazione 
            </Button>
          </Box>
        </Container>

    </>
  );
};

export default Home;


function BookingList() {
  const { data: bookings} = api.bookings.getCurrent.useQuery();
  return (
  <Box
  sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}
  >
    <FixedSizeList
      height={350}
      width={360}
      itemSize={70}
      itemCount={bookings?.length || 0}
      itemData={bookings || []}
      >
        {RenderRow}
    </FixedSizeList>
  </Box>
);
}

function SubscriptionInfo() {
  const { data: user } = api.user.getCurrent.useQuery();
  
  if (!user) {
    return <div>sus</div>
  }
  
  return (
    <Card sx={{ maxWidth: 345 }} variant={'outlined'}>
        <CardContent>
          <Grid container>
             <Grid item xs={12} >
              <Typography gutterBottom variant="h4">{user.firstName} {user.lastName} </Typography>
            </Grid>
            <Grid item xs={12}>
              <Typography color="gray" variant="h4">{user.email}</Typography>
            </Grid>
          
          <Grid item xs={6} sx={{display: 'flex', alignItems: 'center'}}> 
            <Typography gutterBottom color="grey" variant="h6">
              Accessi 
            </Typography>
          </Grid>
          <Grid item xs={6} >
              <Typography align="right" 
                          color={user.remainingAccesses> 0 ? 'green': 'red'} 
                          gutterBottom variant="h5">{user.remainingAccesses}
              </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography color="grey" gutterBottom variant="h6">
              Abb.
            </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography align="right" gutterBottom variant="h5" >
               {user.subType === SubType.SHARED ? 
                'Condiviso' : 
                'Singolo'}
            </Typography>
          </Grid>
          <Grid item xs={6} >
              <Typography gutterBottom variant="h6" color="text.secondary"  >
                Scadenza
              </Typography>
          </Grid>
          <Grid item xs={6}>
              <Typography align="right" variant="h5">
                {formatDate(user.expiresAt.toISOString(), DateTime.DATE_SHORT)}
              </Typography>
          </Grid>
        </Grid>
          
        </CardContent>
    </Card>
  );
}

function formatDate(s: string, format: Intl.DateTimeFormatOptions): string {
  return DateTime.fromISO(s).setLocale('it').toLocaleString(format)
}

function RenderRow(props: ListChildComponentProps<Booking[]>) {

  const { index, style, data } = props;
  const booking = data[index];

  if (!booking) return <div>no data</div>

  return (
      <ListItemButton divider key={index} style={style}>
        <ListItemIcon sx={{ fontSize: 18 }}>
          <EventIcon />
        </ListItemIcon>
        <ListItemText
          sx={{ my: '1rem' }}
          primary={formatDate(booking.startsAt.toISOString(), DateTime.DATETIME_FULL)}
          primaryTypographyProps={{
            fontSize: 16,
            fontWeight: 'medium',
            letterSpacing: 0,
          }}
          secondary={`Effettuata ${formatDate(booking.createdAt.toISOString(), DateTime.DATETIME_MED)}`}
        />
        <ListItemIcon sx={{fontSize: 18}}>
          <DeleteIcon />
        </ListItemIcon>
    </ListItemButton>
  )
}

function SignIn() {
  return (
    <Container component="main" maxWidth="xs">
      <CssBaseline />
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
      <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
        <LockOutlinedIcon />
      </Avatar>
        <Typography component="h1" variant="h5">
          Accedi
        </Typography>
        <Box component="form" noValidate sx={{ mt: 1 }}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label="Email Address"
            name="email"
            autoComplete="email"
            autoFocus
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
          />
          
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 3 }}
          >
            Conferma
          </Button>
          <Grid container>
            <Grid item xs>
              <Link href="/reset" variant="body2">
                Password dimenticata
                ?
              </Link>
            </Grid>
          </Grid>
        </Box>
      </Box>
  </Container>
  )

}