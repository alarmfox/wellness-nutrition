// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native","linux-musl"]
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
}

enum SubType {
    SHARED
    SINGLE
}

enum Role {
    ADMIN
    USER
}

enum EventType {
    CREATED
    DELETED
}

model User {
    id                         String    @id @default(cuid())
    firstName                  String
    lastName                   String
    address                    String
    password                   String?   @db.Text
    role                       Role      @default(USER)
    medOk                      Boolean   @default(false)
    cellphone                  String?
    subType                    SubType   @default(SHARED)
    email                      String    @unique
    emailVerified              DateTime?
    expiresAt                  DateTime
    remainingAccesses          Int
    verificationToken          String?
    verificationTokenExpiresIn DateTime?
    goals                      String?
    bookings                   Booking[]
    events                     Event[]

    @@index([verificationToken])
}

model Slot {
    startsAt    DateTime  @id
    peopleCount Int       @default(0)
    disabled    Boolean   @default(false)
    bookings    Booking[]
}

model Booking {
    id        BigInt   @id @default(autoincrement())
    userId    String
    createdAt DateTime @default(now())
    startsAt  DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    slot Slot @relation(fields: [startsAt], references: [startsAt], onDelete: Cascade)

    @@index([userId])
    @@index([startsAt])
}

model Event {
    id         Int       @id @default(autoincrement())
    userId     String
    startsAt   DateTime
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    type       EventType
    occurredAt DateTime  @default(now())

    @@index([userId])
}
