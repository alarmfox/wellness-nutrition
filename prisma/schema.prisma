// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum SubType {
    SHARED
    SINGLE
}

enum Role {
    ADMIN
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String    @id @default(cuid())
    firstName         String
    lastName          String
    address           String
    password          String?   @db.Text
    role              Role      @default(USER)
    medOk             Boolean   @default(false)
    cellphone         String?
    subType           SubType   @default(SHARED)
    email             String?   @unique
    emailVerified     DateTime?
    expiresAt         DateTime
    remainingAccesses Int
    accounts          Account[]
    sessions          Session[]
    bookings          Booking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Booking {
    id        BigInt   @id @default(autoincrement())
    startsAt  DateTime
    endsAt    DateTime
    createdAt DateTime
    updatedAt DateTime
    usesrId   String
    User      User     @relation(fields: [usesrId], references: [id], onDelete: Cascade)
}
